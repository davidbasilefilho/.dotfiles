#+title: QTILE CONFIG
#+author: David Basile Filho
#+startup: showeverything
#+description: An org document for my Qtile Configuration
#+auto_tangle: t
#+property: header-args :tangle config.py

* TABLE OF CONTENTS :toc:
- [[#about-this-config][ABOUT THIS CONFIG]]
- [[#about-qtile][ABOUT QTILE]]
- [[#features-of-qtile][FEATURES OF QTILE]]
- [[#imports][IMPORTS]]
- [[#variables][VARIABLES]]
  - [[#modifier-key][Modifier Key]]
  - [[#application-preferences][Application Preferences]]
  - [[#home-directory][Home Directory]]
  - [[#colors][Colors]]
- [[#keybindings][KEYBINDINGS]]
- [[#groups][GROUPS]]
- [[#layout-theme][LAYOUT THEME]]
- [[#layouts][LAYOUTS]]
- [[#prompt][PROMPT]]
- [[#decoration-groups][DECORATION GROUPS]]
- [[#widget-defaults][WIDGET DEFAULTS]]
- [[#bar][BAR]]
- [[#drag-windows][DRAG WINDOWS]]
- [[#float-rules][FLOAT RULES]]
- [[#startup-programs][STARTUP PROGRAMS]]
- [[#java-fix][JAVA FIX]]

* ABOUT THIS CONFIG
The following comments are the copyright and licensing information from the default
  qtile config. Copyright (c) 2010 Aldo Cortesi, 2010, 2014 dequis, 2012 Randall Ma,
  2012-2014 Tycho Andersen, 2012 Craig Barnes, 2013 horsik, 2013 Tao Sauvage
Modified by David Basile Filho
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to  permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

* ABOUT QTILE
Qtile is a full-featured, hackable tiling window manager written in Python. Qtile is simple, small, and extensible. It is easy to write your own layouts, widgets, and built-in commands. It is written and configured entirely in Python, which means you can leverage the full power and flexibility of the language to make it fit your needs.

* FEATURES OF QTILE
- Simple, small and extensible. It's easy to write your own layouts, widgets and commands.
- Configured in Python.
- Command shell that allows all aspects of Qtile to be managed and inspected.
- Complete remote scriptability - write scripts to set up workspaces, manipulate windows, update status bar widgets and more.
- Qtile's remote scriptability makes it one of the most thoroughly unit-tested window managers around.

* IMPORTS
Imports some python modules / libraries that must be included for this config to work. Keep in mind that you must have [[https://github.com/elParaguayo/qtile-extras][qtile-extras]] in your PC.

#+begin_src python
import os
import re
import socket
import subprocess
from libqtile import qtile
from libqtile.config import Click, Drag, Group, KeyChord, Key, Match, Screen
from libqtile.command import lazy
from libqtile import layout, bar, hook
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
from typing import List
from qtile_extras import widget
from qtile_extras.widget.decorations import RectDecoration
#+end_src

* VARIABLES
Variables that contain data used throughout the config

** Modifier Key
A variable that sets my default modifier key to the Super / Meta / Windows key or the Alt key or whatever I'd like.

#+begin_src python
mod = "mod4"
#+end_src

** Application Preferences
Sets variables to programs that I like and that are used by the config.

#+begin_src python
terminal = "alacritty"
browser = "brave-browser"
filemanager = "pcmanfm"
#+end_src

** Home Directory
Gets the home directory of your PC to load stuff.

#+begin_src python
home = os.path.expanduser("~")
#+end_src

** Colors
Predefined colors made by the [[https://github.com/catppuccin/catppuccin][Catppuccin]] development team.

#+begin_src python
colors = [
    ["#1E1E2E", "#1E1E2E"],
    ["#45475a", "#45475a"],
    ["#9399b2", "#9399b2"],
    ["#CDD6F4", "#CDD6F4"],
    ["#F38BA8", "#F38BA8"],
    ["#A6E3A1", "#A6E3A1"],
    ["#FAB387", "#FAB387"],
    ["#89B4FA", "#89B4FA"],
    ["#cba6f7", "#cba6f7"],
    ["#89dceb", "#89dceb"],
    ["#B4BEFE", "#B4BEFE"],
    ["#1e1e2e", "#1e1e2e"],
    ["#00000000", "#00000000"], # Transparent
]
#+end_src

* KEYBINDINGS
IMPORTANT - Keep in mind that I the Dvorak keyboard layout, so I adapted the HJKL keys to HTNS in my Qtile config.

| KEYBINDING             | ACTION                                    |
|------------------------+-------------------------------------------|
| MODKEY + RETURN        | Open Terminal                             |
| MODKEY + HTNS          | Focus on window on the Left/Down/Up/Right |
| MODKEY + SHIFT + HTNS  | Move the window to the Left/Down/Up/Right |
| MODKEY + CTRL + HTNS   | Grow the window to the Left/Down/Up/Right |
| MODKEY + SPACE         | Open Rofi Launcher                        |
| MODKEY + SHIFT + P     | Opens Rofi Powermenu                      |
| MODKEY + TAB           | Cycle layouts                             |
| MODKEY + SHIFT + C     | Close focused window                      |
| MODKEY + F             | Make focused window fullscreen            |
| MODKEY + SHIFT + F     | Make focused window float                 |
| MODKEY + 1-5           | Switch focus to workspace 1-5             |
| MODKEY + SHIFT + 1-5   | Send focused window to workspace 1-5      |
| MODKEY + SHIFT + R     | Restarts Qtile                            |
| MODKEY + B             | Opens browser                             |
| MODKEY + SHIFT + E     | Opens the file manager                    |
| MODKEY + E E           | Opens Emacsclient                         |
| MODKEY + E B           | Opens Ibuffer                             |
| MODKEY + E D           | Opens Dired                               |
| MODKEY + SHIFT + SPACE | Next window on max layout                 |
| MODKEY + V +           | Increase volume by 10%                    |
| MODKEY + V -           | Decrease volume by 10%                    |

#+begin_src python
keys = [
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "s", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "t", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "n", lazy.layout.up(), desc="Move focus up"),

    Key(
        [mod, "shift"],
        "space",
        lazy.layout.next(),
        desc="Move window focus to other window",
    ),
    Key(
        [mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window to the left"
    ),
    Key(
        [mod, "shift"],
        "s",
        lazy.layout.shuffle_right(),
        desc="Move window to the right",
    ),

    Key([mod, "shift"], "t", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "n", lazy.layout.shuffle_up(), desc="Move window up"),
    Key([mod, "control"], "h", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key(
        [mod, "control"], "s", lazy.layout.grow_right(), desc="Grow window to the right"
    ),
    Key([mod, "control"], "t", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "control"], "n", lazy.layout.grow_up(), desc="Grow window up"),
    Key(
        [mod, "shift"],
        "Return",
        lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack",
    ),
    Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod, "shift"], "c", lazy.window.kill(), desc="Kill focused window"),
    Key([mod, "shift"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    Key([mod], "r", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),
    Key(
        [mod],
        "f",
        lazy.window.toggle_fullscreen(),
        desc="Toggles the fullscreen state of the window",
    ),
    Key(
        [mod, "shift"],
        "f",
        lazy.window.toggle_floating(),
        desc="Toggles the floating state of the window",
    ),
    # Open Programs
    Key([mod], "b", lazy.spawn(browser), desc="Open Browser"),
    Key([mod, "shift"], "e", lazy.spawn(filemanager), desc="Open File Manager"),
    Key(
        [mod],
        "space",
        lazy.spawn([home + "/.config/rofi/scripts/launcher_t1"]),
        desc="Open Rofi",
    ),
    Key(
        [mod, "shift"],
        "p",
        lazy.spawn([home + "/.config/rofi/scripts/powermenu_t1"]),
        desc="Open Power Menu",
    ),
    # Emacs programs launched using the key chord Super + e followed by 'key'
    KeyChord(
        [mod],
        "e",
        [
            Key(
                [],
                "e",
                lazy.spawn("emacsclient -c -a 'emacs'"),
                desc="Emacsclient Dashboard",
            ),
            Key(
                [],
                "b",
                lazy.spawn("emacsclient -c -a 'emacs' --eval '(ibuffer)'"),
                desc="Emacsclient Ibuffer",
            ),
            Key(
                [],
                "d",
                lazy.spawn("emacsclient -c -a 'emacs' --eval '(dired nil)'"),
                desc="Emacsclient Dired",
            ),
            # Key(
            #     [],
            #     "s",
            #     lazy.spawn("emacsclient -c -a 'emacs' --eval '(eshell)'"),
            #     desc="Emacsclient Eshell",
            # ),
            Key(
                [],
                "v",
                lazy.spawn("emacsclient -c -a 'emacs' --eval '(+vterm/here nil)'"),
                desc="Emacsclient Vterm",
            ),
        ],
    ),
]
#+end_src

* GROUPS
Groups are actually workspaces.

#+begin_src python
group_names = "WWW DEV SCHOOL MUS GFX".split()
groups = [
    Group(group_names[0], layout="max"),
    Group(group_names[1], layout="columns"),
    Group(group_names[2], layout="columns"),
    Group(group_names[3], layout="max"),
    Group(group_names[4], layout="columns"),
]

for i, name in enumerate(group_names):
    indx = str(i + 1)
    keys += [
        Key([mod], indx, lazy.group[name].toscreen()),
        Key([mod, "shift"], indx, lazy.window.togroup(name)),
    ]
#+end_src

* LAYOUT THEME
Stuff like border width, margins, border colors, etc.

#+begin_src python
layout_theme = {
    "border_width": 4,
    "margin": 8,
    "border_focus": colors[7],
    "border_normal": colors[0]
}
#+end_src

* LAYOUTS
Sets up the layouts.

#+begin_src python
layouts = [
    layout.Columns(
        ,**layout_theme,
        border_on_single = True
    ),
    layout.Max(
        ,**layout_theme
    ),
    layout.Floating(
        ,**layout_theme
    ),
    # layout.Stack(num_stacks=2),
    # layout.Bsp(**layout_theme, border_on_single = True),
    # layout.Spiral(**layout_theme),
    # layout.Matrix(),
    # layout.MonadTall(),
    # layout.MonadWide(**layout_theme),
    # layout.RatioTile(),
    # layout.Tile(),
    # layout.TreeTab(),
    # layout.VerticalTile(),
    # layout.Zoomy(),
]
#+end_src

* PROMPT
The style for the prompt widget.

#+begin_src python
prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())
#+end_src


* DECORATION GROUPS
This is used to combine the RectDecoration of multiple widgets.

#+begin_src python
decoration_radius = 8

decoration_group_black = {
    "decorations": [
        RectDecoration(
            colour=colors[11],
            radius=decoration_radius,
            filled=True,
            padding_y=0,
            group=True,
        )
    ],
    "padding": 6,
}

decoration_group_yellow = {
    "decorations": [
        RectDecoration(
            colour=colors[6],
            radius=decoration_radius,
            filled=True,
            padding_y=0,
            group=True,
        )
    ],
    "padding": 6,
}

decoration_group_blue = {
    "decorations": [
        RectDecoration(
            colour=colors[7],
            radius=decoration_radius,
            filled=True,
            padding_y=0,
            group=True,
        )
    ],
    "padding": 6,
}
#+end_src

* WIDGET DEFAULTS
Default configuration for the widgets.

#+begin_src python
widget_defaults = dict(
    font="Ubuntu Nerd Font Bold",
    fontsize=12,
    padding=6,
    background=colors[12],
)

extension_defaults = widget_defaults.copy()
#+end_src

* BAR
Bar customization, widgets, decorations, etc.

#+begin_src python
screens = [
    Screen(
        top=bar.Bar(
            [
                widget.GroupBox(
                    # fontsize=12,
                    margin_y=3,
                    background=colors[12],
                    margin_x=0,
                    padding_y=6,
                    padding_x=4,
                    borderwidth=3,
                    active=colors[3],
                    inactive=colors[2],
                    rounded=True,
                    highlight_color=colors[1],
                    highlight_method="text",
                    this_current_screen_border=colors[7],
                    this_screen_border=colors[4],
                    other_current_screen_border=colors[7],
                    other_screen_border=colors[4],
                    foreground=colors[0],
                    ,**decoration_group_black,
                ),
                widget.Sep(
                    linewidth=0,
                    background=colors[12],
                    foreground=colors[0],
                    padding=12
                ),
                widget.CurrentLayoutIcon(
                    custom_icon_paths=[os.path.expanduser("~/.config/qtile/icons")],
                    foreground=colors[3],
                    scale=0.6,
                    background=colors[12],
                    ,**decoration_group_black,
                ),
                widget.CurrentLayout(foreground=colors[3], **decoration_group_black, background=colors[12]),
                widget.Sep(
                    linewidth=0, foreground=colors[0], background=colors[12]
                ),
                widget.WindowName(
                    foreground=colors[7], background=colors[12]
                ),
                widget.Sep(linewidth=0, foreground=colors[0], **decoration_group_blue),
                widget.Systray(background=colors[7], **decoration_group_blue),
                widget.Sep(
                    linewidth=0, foreground=colors[0], background=colors[12], **decoration_group_blue
                ),
                widget.Volume(
                    foreground=colors[11],
                    background=colors[12],
                    fmt="\uf485 {}",
                    ,**decoration_group_blue
                ),
                widget.Sep(
                    linewidth=0, foreground=colors[0], background=colors[12], **decoration_group_blue
                ),
                widget.Sep(
                    linewidth=0, foreground=colors[0], background=colors[12], padding=12
                ),
                widget.Clock(
                    foreground=colors[3],
                    background=colors[12],
                    format="%H:%M | %d/%m/%Y",
                    ,**decoration_group_black,
                ),
            ],
            24,
            margin=8,
            background=colors[12],
        ),
    ),
]
#+end_src

#+RESULTS:

* DRAG WINDOWS
Setting up the mouse controls for floating windows.

#+begin_src python
# Drag floating layouts.
mouse = [
    Drag(
        [mod],
        "Button1",
        lazy.window.set_position_floating(),
        start=lazy.window.get_position(),
    ),
    Drag(
        [mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()
    ),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
#+end_src

* FLOAT RULES
Make specific windows float.

#+begin_src python
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        ,*layout.Floating.default_float_rules,
        Match(title='Confirmation'),
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
        Match(title="Please Confirm..."), # Godot Cofirmation stuff
        Match(title="Create New Project"), # Godot New Project
    ]
)

auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True
#+end_src

* STARTUP PROGRAMS
Programs that run on startup.

#+begin_src python
@hook.subscribe.startup_once
def start_once():
    subprocess.call([home + "/.config/qtile/autostart.sh"])
#+end_src

* JAVA FIX
Fix a bug on Java applications.
The Qtile team's explanation for this fix:
    ~Gasp! We're lying here. In fact, nobody really uses or cares about this string besides java UI toolkits; you can see several discussions on the mailing lists, GitHub issues, and other WM documentation that suggest setting this string if your java app doesn't work correctly. We may as well just lie and say that we're a working one by default.~

    ~We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in java that happens to be on java's whitelist.~

#+begin_src python
wmname = "LG3D"
#+end_src
